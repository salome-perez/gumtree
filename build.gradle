plugins {
    id 'jacoco'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

nexusPublishing {
    repositories {
        sonatype()
    }
}

def projectsVersion = '3.1.0-SNAPSHOT'
def isReleaseVersion = !projectsVersion.endsWith("SNAPSHOT")

allprojects {
    apply plugin: 'idea'

    group = 'com.github.gumtreediff'
    version = projectsVersion

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    sourceCompatibility = '11'
    targetCompatibility = '11'

    compileJava {
        options.compilerArgs << '-Xlint:deprecation'
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        options.addBooleanOption('html5', true)
    }

    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion = '8.36'
        configFile = rootProject.file('gumtree_checkstyle.xml')
        configProperties = [suppressionFile: "${rootProject.file('checkstyle_ignore.xml')}"]
        ignoreFailures = false
        showViolations = true
    }

    dependencies {
        annotationProcessor 'org.atteo.classindex:classindex:3.10'
        implementation 'org.atteo.classindex:classindex:3.10'
        testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
        testImplementation 'org.hamcrest:hamcrest-library:2.1'
    }

    test {
        useJUnitPlatform()

        testLogging {
            exceptionFormat = 'full'
            events "passed", "skipped", "failed"
        }

        reports.html.required = false
    }
}

configure(subprojects.findAll { it.name != 'core' }) {
    dependencies {
        implementation project(':core')
    }
}

configure(subprojects.findAll { it.name.startsWith('gen.antlr3') }) {
    apply plugin: 'antlr'

    dependencies {
        antlr 'org.antlr:antlr:3.5.2'
    }

    if (it.name.startsWith('gen.antlr3-')) {
        dependencies {
            implementation project(':gen.antlr3')
        }
    }
}

configure(subprojects.findAll { it.name.startsWith('gen.antlr4') }) {
    apply plugin: 'antlr'

    dependencies {
        antlr 'org.antlr:antlr4:4.5'
    }

    if (it.name.startsWith('gen.antlr4-')) {
        dependencies {
            implementation project(':gen.antlr4')
        }
    }
}

def jacocoProjectsNames = ['core', 'gen.jdt', 'gen.c', 'gen.ruby', 'gen.js', 'gen.srcml', 'gen.css']
def jacocoProjects = subprojects.findAll { it.name in jacocoProjectsNames }
configure(jacocoProjects) {
    apply plugin: 'jacoco'

    jacocoTestReport {
        reports {
            html.required = true
            xml.required = true
            csv.required = false
        }
    }
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn subprojects*.test
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn(jacocoProjects.test)

    getAdditionalSourceDirs().from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    getSourceDirectories().from = files(jacocoProjects.sourceSets.main.allSource.srcDirs)
    getClassDirectories().from = files(jacocoProjects.sourceSets.main.output)
    getExecutionData().from = files(jacocoProjects.jacocoTestReport.executionData)

    reports {
        html.required = true
        xml.required = true
    }
}

def projectDescriptions = [
    client: 'GumTree abstract client module.',
    'client.diff': 'GumTree diff client.',
    core: 'GumTree core module.', 'gen.antlr3': 'GumTree abstract AntLR module.',
    'gen.antlr3-antlr': 'GumTree tree generator for AntLR grammars (AntLR based)',
    'gen.antlr3-json': 'GumTree tree generator for JSON code (AntLR based).',
    'gen.antlr3-php': 'GumTree tree generator for PHP code (AntLR based).',
    'gen.antlr3-r': 'GumTree tree generator for R code (AntLR based).',
    'gen.antlr3-xml': 'GumTree tree generator for XML code (AntLR based).',
    'gen.antlr4': 'GumTree abstract AntLR4 module.',
    'gen.antlr4-matlab': 'GumTree abstract AntLR4 module.',
    'gen.c': 'GumTree tree generator for C code. Requires cgum.',
    'gen.css': 'GumTree tree generator for CSS code based on ph-css.',
    'gen.javaparser': 'GumTree tree generator for Java code (JavaParser based).',
    'gen.jdt': 'GumTree tree generator for Java code (Eclipse JDT based).',
    'gen.js': 'GumTree tree generator for JavaScript code (Rhino based).',
    'gen.python': 'GumTree tree generator for Python. Requires pythonparser.',
    'gen.ruby': 'GumTree tree generator for Ruby code (JRuby based).',
    'gen.srcml': 'GumTree tree generator for C/C++, C# and Java code. Requires srcml.',
]

configure(subprojects.findAll { !(it.name in ['dist', 'benchmark']) }) { subproject ->
    apply plugin: "maven-publish"
    apply plugin: "signing"

    publishing {        
        publications {
            gumtreeDist(MavenPublication) {
                from(components.java)

                pom {
                    name = "GumTree ${subproject.name}"
                    description = projectDescriptions[subproject.name]
                    url = 'https://github.com/GumTreeDiff/gumtree/'

                    scm {
                        connection = 'scm:git:https://github.com/GumTreeDiff/gumtree/'
                        developerConnection = 'scm:git:https://github.com/GumTreeDiff/gumtree/'
                        url = 'https://github.com/GumTreeDiff/gumtree/'
                    }

                    licenses {
                        license {
                            name = 'GNU Lesser General Public License v3.0'
                            url = 'h ttps://www.gnu.org/copyleft/lesser.html'
                        }
                    }

                    developers {
                        developer {
                            id = 'jre'
                            name = 'Jean-Rémy Falleri'
                            email = 'jr.falleri@gmail.com'
                        }

                        developer {
                            id = 'flop'
                            name = 'Floréal Morandat'
                            email = 'florealm@gmail.com'
                        }

                        developer {
                            id = 'matias'
                            name = 'Matias Martinez'
                            email = 'matias.sebastian.martinez@gmail.com'
                        }
                    }
                }
            }
        }
    }

    signing {
        required { isReleaseVersion }
        useInMemoryPgpKeys(findProperty("gumtreeKey"), findProperty("gumtreeKeyPassphrase"))
        sign publishing.publications.gumtreeDist
    }
}

evaluationDependsOnChildren()

configure(subprojects) {
    if (!project.hasProperty('testNative') && it.hasProperty('isNative') && it.isNative == true)
        it.test.enabled = false
}
